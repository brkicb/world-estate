"""
Django settings for world_estate project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from os import getenv, path
import sys
import dj_database_url
from django.core.management.utils import get_random_secret_key
import dotenv
# from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

dotenv_file = BASE_DIR / '.env'

if path.isfile(dotenv_file):
    dotenv.load_dotenv(dotenv_file)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = getenv('DJANGO_SECRET_KEY', get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = getenv('DEBUG', 'False') == 'True'


ALLOWED_HOSTS = getenv('DJANGO_ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')

DEVELOPMENT_MODE = getenv('DEVELOPMENT_MODE', 'False') == 'True'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'storages',
    'rest_framework',
    'users',
    'listings',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'world_estate.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'build'
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'world_estate.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# POSTGRES_DB = getenv('POSTGRES_DB')
# POSTGRES_PASSWORD = getenv('POSTGRES_PASSWORD')
# POSTGRES_USER = getenv('POSTGRES_USER')
# POSTGRES_HOST = getenv('POSTGRES_HOST')
# POSTGRES_PORT = getenv('POSTGRES_PORT')

# In digitalocean values will be:
# POSTGRES_DB = ${db.DATABASE}
# POSTGRES_PASSWORD = ${db.PASSWORD}
# POSTGRES_USER = ${db.USERNAME}
# POSTGRES_HOST = ${db.HOSTNAME}
# POSTGRES_PORT = ${db.PORT}

# POSTGRES_READY = (
#     POSTGRES_DB is not None
#     and POSTGRES_PASSWORD is not None
#     and POSTGRES_USER is not None
#     and POSTGRES_HOST is not None
#     and POSTGRES_PORT is not None
# )

if DEVELOPMENT_MODE is True:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
elif len(sys.argv) > 0 and sys.argv[1] != 'collectstatic':
    if getenv('DATABASE_URL', None) is None:
        raise Exception('DATABASE_URL environment variable not defined')
    DATABASES = {'default': dj_database_url.config(conn_max_age=600)}
    # DATABASES = {
    #     'default': {
    #         'ENGINE': 'django.db.backends.postgresql',
    #         'NAME': getenv('PG_NAME'),
    #         'USER': getenv('PG_USER'),
    #         'PASSWORD': getenv('PG_PASSWORD'),
    #         'HOST': getenv('PG_HOST'),
    #         'PORT': getenv('PG_PORT')
    #     }
    # }

    ### ENVIRONMENT SETUP #1 ###
    # DATABASE_URL -> ${db.DATABASE_URL}

    ### ENVIONRMENT SETUP #2 ###
    # POSTGRES_NAME -> ${db.DATABASE}
    # POSTGRES_USER -> ${db.USERNAME}
    # POSTGRES_PASSWORD -> ${db.PASSWORD}
    # POSTGRES_HOST -> ${db.HOSTNAME}
    # POSTGRES_PORT -> ${db.PORT}

# if POSTGRES_READY:
#     DATABASES = {
#         'default': {
#             'ENGINE': 'django.db.backends.postgresql',
#             'NAME': POSTGRES_DB,
#             'USER': POSTGRES_USER,
#             'PASSWORD': POSTGRES_PASSWORD,
#             'HOST': POSTGRES_HOST,
#             'PORT': POSTGRES_PORT
#         }
#     }



EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = getenv('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = True


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


if DEVELOPMENT_MODE is True:
    STATIC_URL = 'static/'
    MEDIA_URL = 'media/'
    STATIC_ROOT = BASE_DIR / 'static'
    MEDIA_ROOT = BASE_DIR / 'media'
else:
    # AWS Settings

    AWS_STORAGE_BUCKET_NAME = 'world-estate-space'
    AWS_S3_REGION_NAME = 'nyc3'
    AWS_ACCESS_KEY_ID = getenv('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = getenv('AWS_SECRET_ACCESS_KEY')
    AWS_S3_ENDPOINT_URL = f'https://{AWS_S3_REGION_NAME}.digitaloceanspaces.com'
    AWS_S3_CUSTOM_DOMAIN = 'spaces.linkedweb-app-testing.info'
    # AWS_LOCATION = 'my_files'
    # AWS_DEFAULT_ACL ='private'
    # AWS_S3_SIGNATURE_VERSION = 's3'
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    AWS_STATIC_LOCATION = 'static'
    AWS_PUBLIC_MEDIA_LOCATION = 'media'

    STATICFILES_STORAGE = 'storage_backends.StaticFileStorage'
    DEFAULT_FILE_STORAGE = 'storage_backends.MediaFileStorage'

STATICFILES_DIRS = [
    BASE_DIR / 'build/static'
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 3
}

# SIMPLE_JWT = {
#     'ACCESS_TOKEN_LIFETIME': timedelta(minutes=1),
#     'REFRESH_TOKEN_LIFETIME': timedelta(minutes=5)
# }

AUTH_USER_MODEL = 'users.UserAccount'
